---
import { Icon } from 'astro-icon';
import { Picture } from '@astrojs/image/components';

interface CallToAction {
  text: string;
  href: string;
  icon?: string;
}

export interface Props {
  title?: string;
  subtitle?: string;
  callToAction?: string | CallToAction;
  callToAction2?: string | CallToAction;
  image?: string | any; // TODO: find HTMLElementProps
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  content = await Astro.slots.render('content'),
  callToAction = await Astro.slots.render('callToAction'),
  callToAction2 = await Astro.slots.render('callToAction2'),
  image = await Astro.slots.render('image'),
} = Astro.props;
---

<section class="relative md:-mt-[76px]">
  <div class="absolute inset-0" aria-hidden="true"></div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="w-full h-screen relative">
      <div
        class="opacity-80 absolute inset-0 hero-shape"
        style="z-index: -2; background: linear-gradient(rgba(255,255,255,0.6), rgba(255,255,255,0.6));"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="none">
          <path d="M0 0 L50 100 L100 0 L100 100 L0 100 Z" fill="white"></path>
        </svg>
        <div
          class="bg-[url('~/assets/images/pexels-david-j-boozer-105075.jpg')] absolute inset-0 sm:rounded-none"
          style="background-size: cover; background-position: center;"
        >
        </div>
      </div>

      <div class="mt-28 pt-[76px]" style="z-index: 1;">
        <!-- Text container goes here -->
        <div class="mt-36 text-center pb-10 md:pb-16 max-w-screen-lg mx-auto">
          {
            title && (
              <h1
                class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200"
                set:html={title}
              />
            )
          }
          <div class="max-w-3xl mx-auto">
            {subtitle && <p class="text-xl text-muted mb-6 dark:text-slate-300" set:html={subtitle} />}
            <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
              {
                callToAction && (
                  <div class="flex w-full sm:w-auto">
                    {typeof callToAction === 'string' ? (
                      <Fragment set:html={callToAction} />
                    ) : (
                      <a
                        class="btn btn-primary sm:mb-0 w-full"
                        href={callToAction?.href}
                        target="_blank"
                        rel="noopener"
                      >
                        {callToAction?.icon && (
                          <>
                            <Icon name={callToAction.icon} class="w-5 h-5 mr-1 -ml-1.5" />{' '}
                          </>
                        )}
                        {callToAction?.text}
                      </a>
                    )}
                  </div>
                )
              }
              {
                callToAction2 && (
                  <div class="flex w-full sm:w-auto">
                    {typeof callToAction2 === 'string' ? (
                      <Fragment set:html={callToAction2} />
                    ) : (
                      <a class="btn w-full" href={callToAction2?.href}>
                        {callToAction2?.icon && (
                          <>
                            <Icon name={callToAction2.icon} class="w-5 h-5 mr-1 -ml-1.5" />{' '}
                          </>
                        )}
                        {callToAction2.text}
                      </a>
                    )}
                  </div>
                )
              }
            </div>
          </div>
          {content && <Fragment set:html={content} />}
        </div>
      </div>
    </div>
  </div>
</section>
